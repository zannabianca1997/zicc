use either::{Either,Left,Right};

use crate::ast::*;
use lexer::{Token, Identifier, SpecialIdentifier, StringLit};
use vm::VMInt;

grammar<'s>();

pub File: File<'s, AstErrorRecovery<'s>> = {
    <mut statements: (<Labelled<Statement?>> "\n")*> <last:Labelled<Statement?>> => {
      statements.push(last);
      File { statements: statements.into_iter().filter(|l| l.is_labelled() || l.content.is_some()).collect() }
    }
}


// an identifier that can be defined
DefinableIdentifier: Identifier<'s> = {
  "ident", 
  $($kwd_str),kwds
}

LabelDef: LabelDef<'s> = {
  <label: DefinableIdentifier> ":" => LabelDef {<>}
}
LabelRef: LabelRef<'s, AstErrorRecovery<'s>> = {
  DefinableIdentifier => LabelRef::Identifier(<>),
  "$ident" => LabelRef::SpecialIdentifier(<>),
}

Labelled<T>: Labelled<'s, T> = {
    <labels: LabelDef*> <content: T> => Labelled { labels: labels.into_iter().collect(), content }
}
LabelledPlus<T>: Labelled<'s, T> = {
    <labels: LabelDef+> <content: T> => Labelled { labels: labels.into_iter().collect(), content }
}

Statement: Statement<'s, AstErrorRecovery<'s>> = {
  "ints" <values: CommaSepExprs> => Statement::IntsStm(IntsStm{<>}),
  Instruction => Statement::Instruction(<>),
  "inc" <UnlabelledWriteParam> => Statement::Inc(IncStm(<>)),
  "dec" <UnlabelledWriteParam> => Statement::Dec(DecStm(<>)),
  "jmp" <ReadParam> => Statement::Jmp(JmpStm(<>)),
  "mov" <ParamMov> => Statement::Mov(<>),
  "zeros" <Expression> => Statement::Zeros(ZerosStm(<>))
}

Instruction: Instruction<'s, AstErrorRecovery<'s>> = {
    "add"  <ParamsRRW>  => Instruction::Add(<>.0,<>.1,<>.2),
    "mul"  <ParamsRRW>  => Instruction::Mul(<>.0,<>.1,<>.2),
    "in"   <WriteParam> => Instruction::In(<>),
    "out"  <ReadParam>  => Instruction::Out(<>),
    "jz"   <ParamsRR>   => Instruction::Jz(<>.0,<>.1),
    "jnz"  <ParamsRR>   => Instruction::Jnz(<>.0,<>.1),
    "slt"  <ParamsRRW>  => Instruction::Slt(<>.0,<>.1,<>.2),
    "seq"  <ParamsRRW>  => Instruction::Seq(<>.0,<>.1,<>.2),
    "incb" <ReadParam>  => Instruction::Incb(<>),
    "halt"              => Instruction::Halt,
}

ParamMov: MovStm<'s, AstErrorRecovery<'s>> = {
  <a: ReadParam> "," <b: WriteParam> => MovStm::Single(a, b),
  <a: ReadParam> <b: WriteParamNoComma> => MovStm::Single(a, b),
  <a: WriteParam> "," <b: WriteParam> "," <l:Expression> =>? Ok(MovStm::Multiple(a.try_into()?,b.try_into()?,l)),
  <a: WriteParam> <b: WriteParamNoComma> "," <l:Expression> =>? Ok(MovStm::Multiple(a.try_into()?,b.try_into()?,l)),
  <a: WriteParam> "," <b: WriteParam> <l:ExpressionNonNeg> =>? Ok(MovStm::Multiple(a.try_into()?,b.try_into()?,l)),
  <a: WriteParam> <b: WriteParamNoComma> <l:ExpressionNonNeg> =>? Ok(MovStm::Multiple(a.try_into()?,b.try_into()?,l))
}

ReadParam: ReadParam<'s, AstErrorRecovery<'s>> = {
  <value: Labelled<Expression>> => ReadParam::Absolute(AbsoluteParam{<>}),
  "#" <value: Labelled<Expression>> => ReadParam::Immediate(ImmediateParam{<>}),
  "@" <value: Labelled<Expression>> => ReadParam::Relative(RelativeParam{<>})
}
#[inline]
WriteParam: WriteParam<'s, AstErrorRecovery<'s>> = {
  <start:@L> <p: ReadParam> <end:@R> =>? WriteParam::from_read(p).ok_or(
    lalrpop_util::ParseError::User { error: ParseErrorContent::ImmediateInWrite { span: start..end} }
  )
}
ReadParamNoComma: ReadParam<'s, AstErrorRecovery<'s>> = {
  <value: LabelledPlus<Expression>> => ReadParam::Absolute(AbsoluteParam{<>}),
  <value: ExpressionNonNeg> => ReadParam::Absolute(AbsoluteParam{value:Labelled {labels:BTreeSet::new(), content:value}}),
  "#" <value: Labelled<Expression>> => ReadParam::Immediate(ImmediateParam{<>}),
  "@" <value: Labelled<Expression>> => ReadParam::Relative(RelativeParam{<>})
}
WriteParamNoComma: WriteParam<'s, AstErrorRecovery<'s>> = {
  <start:@L> <p: ReadParamNoComma> <end:@R> =>? WriteParam::from_read(p).ok_or(
    lalrpop_util::ParseError::User { error: ParseErrorContent::ImmediateInWrite { span: start..end} }
  )
}

UnlabelledReadParam: UnlabelledReadParam<'s, AstErrorRecovery<'s>> = {
  <value: Expression> => UnlabelledReadParam::Absolute(UnlabelledAbsoluteParam{<>}),
  "#" <value: Expression> => UnlabelledReadParam::Immediate(UnlabelledImmediateParam{<>}),
  "@" <value: Expression> => UnlabelledReadParam::Relative(UnlabelledRelativeParam{<>})
}
UnlabelledNonImmediateReadParam: UnlabelledNonImmediateReadParam<'s, AstErrorRecovery<'s>> = { <UnlabelledWriteParam> }
UnlabelledWriteParam: UnlabelledWriteParam<'s, AstErrorRecovery<'s>> = {
  <start:@L> <p: UnlabelledReadParam> <end:@R> =>? UnlabelledWriteParam::from_read(p).ok_or(
    lalrpop_util::ParseError::User { error: ParseErrorContent::ImmediateInWrite { span: start..end} }
  )
}
UnlabelledReadParamNoComma: UnlabelledReadParam<'s, AstErrorRecovery<'s>> = {
  <value: ExpressionNonNeg> => UnlabelledReadParam::Absolute(UnlabelledAbsoluteParam{<>}),
  "#" <value: Expression> => UnlabelledReadParam::Immediate(UnlabelledImmediateParam{<>}),
  "@" <value: Expression> => UnlabelledReadParam::Relative(UnlabelledRelativeParam{<>})
}
UnlabelledWriteParamNoComma: UnlabelledWriteParam<'s, AstErrorRecovery<'s>> = {
  <start:@L> <p: UnlabelledReadParamNoComma> <end:@R> =>? UnlabelledWriteParam::from_read(p).ok_or(
    lalrpop_util::ParseError::User { error: ParseErrorContent::ImmediateInWrite { span: start..end} }
  )
}

ParamsRR: (ReadParam<'s, AstErrorRecovery<'s>>, ReadParam<'s, AstErrorRecovery<'s>>) = {
  <ReadParam>     <ReadParamNoComma>,
  <ReadParam> "," <ReadParam>
}
ParamsRRW: (ReadParam<'s, AstErrorRecovery<'s>>, ReadParam<'s, AstErrorRecovery<'s>>, WriteParam<'s, AstErrorRecovery<'s>>) = {
  <ReadParam>     <ReadParamNoComma>     <WriteParamNoComma>,
  <ReadParam> "," <ReadParam>            <WriteParamNoComma>,
  <ReadParam>     <ReadParamNoComma> "," <WriteParam>,
  <ReadParam> "," <ReadParam>        "," <WriteParam>,
}

CommaSepExprs: Vec<Labelled<'s, Either<Box<Expression<'s, AstErrorRecovery<'s>>>, StringLit<'s>>>> = {
  <mut head: CommaSepExprs> "," <tail: Labelled<Expression>> => {head.push(tail.map(Left)); head},
  <mut head: CommaSepExprs> <tail: LabelledPlus<Expression>> => {head.push(tail.map(Left)); head},
  <mut head: CommaSepExprs> <tail: ExpressionNonNeg> => {head.push(Labelled { labels: BTreeSet::new(), content: Left(tail)}); head},

  <mut head: CommaSepExprs> ","? <tail: Labelled<"str">> <opt: ExpressionNeg?> => {
    head.push(tail.map(Right)); 
    if let Some(opt) = opt {
      head.push(Labelled { labels: BTreeSet::new(), content: Left(opt)})
    }
    head
  },

  <first:Labelled<"str">> <opt: ExpressionNeg?> => if let Some(opt) = opt { vec![first.map(Right), Labelled { labels: BTreeSet::new(), content: Left(opt)}] } else {vec![first.map(Right)]},
  Labelled<Expression> => vec![<>.map(Left)],
}
 

Expression: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  <l:Expression> "+" <r:Factor> => Box::new(Expression::Sum(l,r)),
  <l:Expression> "-" <r:Factor> => Box::new(Expression::Sub(l,r)),
  Factor,
}

Factor: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  <l:Factor> "*" <r:Atom> => Box::new(Expression::Mul(l,r)),
  <l:Factor> "/" <r:Atom> => Box::new(Expression::Div(l,r)),
  <l:Factor> "%" <r:Atom> => Box::new(Expression::Mod(l,r)),
  Atom,
}

Atom: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  "num" => Box::new(Expression::Num(<>)),
  LabelRef => Box::new(Expression::Ref(<>)),
  "-" <Atom> => Box::new(Expression::Neg(<>)),
  "(" <Expression> ")",
}

ExpressionNonNeg: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  <l:ExpressionNonNeg> "+" <r:Factor> => Box::new(Expression::Sum(l,r)),
  <l:ExpressionNonNeg> "-" <r:Factor> => Box::new(Expression::Sub(l,r)),
  FactorNonNeg,
}

FactorNonNeg: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  <l:FactorNonNeg> "*" <r:Atom> => Box::new(Expression::Mul(l,r)),
  <l:FactorNonNeg> "/" <r:Atom> => Box::new(Expression::Div(l,r)),
  <l:FactorNonNeg> "%" <r:Atom> => Box::new(Expression::Mod(l,r)),
  AtomNonNeg,
}

AtomNonNeg: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  "num" => Box::new(Expression::Num(<>)),
  LabelRef => Box::new(Expression::Ref(<>)),
  "(" <Expression> ")",
}


ExpressionNeg: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  <l:ExpressionNeg> "+" <r:Factor> => Box::new(Expression::Sum(l,r)),
  <l:ExpressionNeg> "-" <r:Factor> => Box::new(Expression::Sub(l,r)),
  FactorNeg,
}

FactorNeg: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  <l:FactorNeg> "*" <r:Atom> => Box::new(Expression::Mul(l,r)),
  <l:FactorNeg> "/" <r:Atom> => Box::new(Expression::Div(l,r)),
  <l:FactorNeg> "%" <r:Atom> => Box::new(Expression::Mod(l,r)),
  AtomNeg,
}

AtomNeg: Box<Expression<'s, AstErrorRecovery<'s>>> = {
  "-" <Atom> => Box::new(Expression::Neg(<>)),
}



extern {
  type Location = usize;
  type Error = ParseErrorContent;

  enum Token<'s> {
    $($kwd_str => Token::$Keyword(<Identifier<'s>>),)kwds
    "ident" => Token::Identifier(<Identifier<'s>>),
    "$ident" => Token::SpecialIdentifier(<SpecialIdentifier>),
    "num" => Token::Number(<VMInt>),
    "str" => Token::StringLit(<StringLit<'s>>),
    "\n" => Token::Newline,
    "," => Token::Comma,
    ":" => Token::Colon,
    "@" => Token::At,
    "#" => Token::Pound,
    "(" => Token::OpenPar,
    ")" => Token::ClosePar,
    "+" => Token::Plus,
    "-" => Token::Minus,
    "*" => Token::Times,
    "/" => Token::Div,
    "%" => Token::Mod,
  }
}