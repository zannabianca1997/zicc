descr: |
    Really inefficent fibo using calls. 
    Stress test the call stack and three variable calls

tests:
    one:
        in: [1, 1, 0]
        out: [1]
    two:
        in: [1, 1, 1]
        out: [1]
    three:
        in: [1, 1, 2]
        out: [2]
    five:
        in: [1, 1, 4]
        out: [5]
    ten:
        in: [1,1,10]
        out: [89]
    lucas:
        in: [2,1,10]
        out: [123]
---
fibo:
    /*
        stack is:
            -4: fibo(0)
            -3: fibo(1)
            -2: n
            -1: return address
    */
    // test for end cases 

    jnz @-2 #$0
        ret // the output fibo(0) is already in @-4
    $0:

    add @-2 #-1 @0
    jnz @0 #$1
        mov @-3 @-4 // move the output value
        ret
    $1:


    /*
        Extending call frame to call recursively
        stack is:
            -4: fibo(0)
            -3: fibo(1)
            -2: n
            -1: return address
             0: fibo(0), then output value
             1: fibo(1)
             2: n-1
    */
    mov @-4 @0   2  // moving base parameters
    add @-2 #-1 @2  // argument 3 is n-1
    
    incb #4
    call #fibo
    incb #-4


    /*
        Extending call frame to call recursively
        stack is:
            -4: fibo(0)
            -3: fibo(1)
            -2: n
            -1: return address
             0: first result
             1: fibo(0), then output value
             2: fibo(1)
             3: n-2
    */

    mov @-4 @1 2   // moving base parameters
    add @-2 #-2 @3 // argument 3 is n-2

    incb #5
    call #fibo
    incb #-5
    
    add @1 @0 @-4 // actual sum, and putting it into the output
    ret

entry main
main:
    /*
        local variables:
            0: fibo(0)
            1: fibo(1)
            2: n
    */
    in @0; in @1;
    in @2

    incb #4
    call #fibo
    incb #-4

    out @0
    ret
